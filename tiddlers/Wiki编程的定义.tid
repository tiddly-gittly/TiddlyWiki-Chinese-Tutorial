class: autonumhead
created: 20230809234409764
creator: 霆枢
modified: 20250324100844913
modifier: 霆枢
tags: 太微原理
title: Wiki编程的定义

!! 编程定义 

> "编程"是我们为了完成某项任务，将解决问题的步骤，用计算机能够理解的语言写成指令，这就是"编程"。而后，计算机会根据这些指令一步步执行，最后完成任务。

"编程"涉及到3个组成部分：

# 我们，负责思考解决问题的步骤
# 我们，负责使用计算机能够理解的语言，来描述解决的步骤
# 计算机，负责执行这些步骤

!! Wiki编程定义

<<<

开发框架/知识管理操作系统 > 插件开发 > wiki编程 > 笔记与写作。

[[太微独特之处-技术部分]]、[[太微是开发框架/知识管理操作系统，不是笔记软件|太微与太记的区别]]

机制（Mechanisms）：组成 TiddlyWiki 的内部机制。

<<<

什么是Wiki编程？（解释）wiki编程改名为文本编程是否更好？

得益于维基文本解析器的三种模式——编译指示模式、区块模式和内联模式，这些模式通过对条目"text"字段的解析，赋予了条目既能够进行写作又能够用于编程的双重功能。

Wiki编程是在条目中进行定义、调用不同形式封装或定义的方法和变量，为了完成某种任务，将解决问题的步骤写成指令，使TiddlyWiki根据这些指令一步步执行，最后完成任务。维基文本的可编程性，在维基文本中可实现功能。tree宏提供了一种Wiki编程参考。整个Wiki编程都在围绕条目字段进行操作。它介于写作与编程语言之间，且偏向编程语言的方面。

元素微件`<$name>`，双尖括号`<<name>>`是两类基本的WikiText调用方式。在函数及筛选器中会有自己独特的变量使用方式。

# 第零序列是''微件（widget）''，包含`微件`、自定义微件、`微件消息`、`核心变量`、`$set $let $vars`变量微件。主要负责构建UI界面，类似Vue或React，是构建Wiki组件及Wiki的核心。有wikitext和js两种用法，状态管理是其中核心，qualify限定微件是常用的状态管理微件；相关的还有 tiddlywiki Cascade级联，CSS（Cascading Style Sheet）。级联（Cascades）是用于构建和自定义 TiddlyWiki 用户界面的关键机制。
# 第一序列是''函数（包含筛选器）''，主要负责数据输出，有wikitext和js两种用法。函数和筛选器类似编程语言的函数运算，从一个输入运用某个筛选器计算得到结果，传递给下一步筛选器，这样一步步的得到计算结果。Wiki的函数及筛选器就等价于编程语言的函数定义和函数定义好的基础函数。
# 第二序列为''进程（包含宏、JS宏）''，主要负责tiddlywiki方法，一些过程性的处理，仅有wikitext一种使用方法；
# 第三序列为''模块''，指通用JS模块。主要负责作为微件、JS宏的依赖使用。四个序列的底层实现均基于此通用JS模块。

在四个序列中同一个功能可能会有不同的实现（微件、筛选器、模块等等）。比如获取条目内容，你可以使用筛选器的`[[tiddlerTitle]text[]]`，也可以使用js的`$tw.wiki.getTiddlerText(title)`。

!!! 笔记模型

tiddlywiki的笔记模型，可以想象成一个Excel表格，表格中的每一行都代表tiddlywiki的一个条目。每一个条目都有自己的字段，这些字段就相当于Excel表格的每一列，字段的字段名相当于表格的表头定义。可以想象，tiddlywiki是一张无限多条目记录的表格。该表格中比较特殊的字段列是title、tag、type、text等字段。其中text字段是条目的核心字段，它关联了解析器模式用于展示笔记或编程内容。

由上述笔记模型可以进而理解''范本条目''（模版）：就是在条目中使用嵌入语法，嵌入某个条目的某个字段列。如：你可以新建名为A范本的条目，在条目中写下`{{!!title}}` 类似Excel的单元格引用的条目中某个字段的文本引用，此文本引用类似一个Excel单元格地址指向具体内容。然后你可以新建B普通条目，在条目中写下 `{{||A范本}}`，这样就会将B普通条目的全部字段传递给A范本。A范本中的文本引用会自动填充为B普通条目字段内容，最后将A范本填充好的内容嵌入到B普通条目中。

!!!! 条目类型

# 数据条目
## 字典条目
## JSON条目
# 系统条目
## 插件（条目组）
## 默认条目
## 模板条目
## 样式条目
## 配置条目
## 调色板条目
# 普通条目

!!! 微件（widget）

微件是wiki编程的核心部分，它几乎独立与JS/TS编程部分，且自给自足，有点Vue或者模版编程的意思。所以关于UI和视图的部分可以大胆交给它完成。你可以使用html和元素小工具混用，并使用相应功能的元素小工具替代html标签。比如button可以使用button微件代替、img可以使用image微件代替、input可以使用[[定义输入框与变量]]描述的代替等等。微件的目标结果感觉是视图。若想要引入JS编程，模块（JS模块类型）是最好的选择，其中macro和widget两种JavaScript模块类型可以直接在条目中调用。最终无论如何，都是在条目中编程和调用。

小工具消息乃由小工具生成，以回应用户的操作。消息具有一个 name、一个可选的主要 parameter，以及一个或多个可选的命名参数。这些消息沿着小工具树向上传播，在那里它们由上层小工具或核心本身处理。小工具消息通常是触发式的，这意味着常常有一个小工具生成，另一个小工具处理。或者任意方式生成，生成此小工具消息的小工具处理。

!!!! 视图

TiddlyWiki 的显示是由一些底层的小工具驱动。这些小工具都组织成树状结构。小工具树是后续化为实际显示的中间表示。每个小工具的类别贡献一个特定功能，就像调用API一样。小工具提供 WikiText 更丰富的功能。它们与 HTML 元素 使用相同的标记方式，但是标记的名称前包含一个 $ 符号。小工具的属性因使用情景不同而被指定为多种不同形式。小工具是开始字符带有$符号，类似[[HTML|https://developer.mozilla.org/zh-CN/docs/Learn/Getting_started_with_the_web/HTML_basics]]文档中的元素标记，如`<$let><$let>`，使用这种标记生成专用的元素小工具。

> 现在，它不再使用 jQuery 和 DOM，而是将维基文本wikitext解析为通用的树形格式，然后将其渲染为文本 HTML。——TiddlyWiki5的诞生！

元素微件通常由 标记（tag）、属性（Attribute）、内容（Content）组成。可以将一个元素置于其他元素之中 —— 称作嵌套。通过指定标记和属性完成微件的方法调用，根据微件行为定义生成行为效果，若有返回值则并将返回值作用或传递到内容中，但微件内容也可以作为一种数据输入，由微件进行处理。

[[HVML|https://hvml.fmsoft.cn/zh]]是一种可编程标记语言，与HTML文本标记语言相比，多了逻辑或算法。元素微件和可编程标记语言的定义比较相似。

```html
<$set name="greeting" value="Hi">
	<$set name="me" value={{!!title}}>
		<$set name="sentence" value="helloworld" >
			<<greeting>>! I am <<me>> and I say: <<sentence>>
		</$set>
	</$set>
</$set>
```

!!!! 变量

JavaScript变量与变量类型。变量是用于存储信息的“容器”。其中对象可以看做字典的键值对或JSON，数组可以看做列表。TW中常常采用者两种数据结构，比如条目，键值对数据和筛选器+`<$list>`元素微件输出的列表。

# 基本类型（值类型）：字符串（String）、数字（Number）、布尔（Boolean）、空（Null）、未定义（Undefined）、Symbol
# 对象类型（引用数据类型）：对象（Object）、数组（Array）、函数（Function）、正则（RegExp）、日期（Date）。

在太微中变量是一个文本片段，可以通过名称访问。变量由微件定义。最常见的是 $set、$let、$vars 和 $list 小工具。

# 过程的参数
# 进程（宏）
# 变量微件（$set、$let、$vars）
# 函数
# 核心变量

“核心变量”是由TiddlyWiki提供好的，具有特殊功能，可以直接引用的。比如currentTiddler核心变量：`<$view tiddler=<<currentTiddler>> field=title/>`。


!!! 函数及筛选器

因为tiddlywiki的笔记模型非常简洁稳定，所以自然而然的引出筛选器并函数这类称为输出的功能。筛选器中也会存在变量的使用，一般分为特殊变量、角括号<>、大括号{}、多参数。角括号表示该参数是一个变量名称。

例如：`[search<currentTiddler>]`、大括号表示该参数是一个文本引用。例如：`[tag{preference}]`、筛选器操作符支持多个参数，这些参数由一个 , 字符分隔。`[param1],[param2]`或`<param1>,{param2}`。例子：`[<jsondata>jsonextract[d],[f],[0]]`。参考[[筛选器参数|https://bramchen.github.io/tw5-docs/zh-Hans/#Filter%20Parameter]]。

调用筛选器有两种方式：先定义函数，然后调用函数`<<myfn param:"value">>`；嵌入筛选器`{{{ [[ ]] }}}`。

其中函数不仅可以用角括号调用，还可以通过function筛选器操作符作为函数筛选器操作符使用：`[function[myfn],[value],···]`。函数定义是包含筛选器表达式的有名称命名的文本片段。使用`\function`编译指示模式定义。筛选器其实非常常见，比如Excel中、Linq语言集成查询、DQL关系型数据库查询语言等等。

!!! 模块

为Wiki编程工具封装JS代码。一个 TiddlyWiki5 的 模块 是包含可运行 JavaScript 的条目，其类型为`application/javascript`且其`modeule-type`字段为该模块的[[模块类型|$:/core/ui/ControlPanel/LoadedModules]]

!!! 调用变量的行为取决于变量的声明方式

元素微件`<$name>`，双尖括号`<<name>>`是两类基本的WikiText调用方式。其中元素微件和筛选器的组合实现Wiki（条目）编程中对逻辑的控制。双尖括号`<<name>>`可以调用进程、自定义微件、函数、宏。

所以若使用js语言，则一般用js定义这两类基本调用方式，然后再在条目中调用。比如定义微件，在微件中初始化类，在类中设置wiki事件监听器，通过事件触发。

调用变量的行为取决于变量的声明方式，也就是声明了什么类型的变量，是微件？定义？函数？微件？总之用JS的说法函数是变量，变量自己也是变量。

可以作为变量的过程定义：进程（宏、JS宏）、微件、函数；变量定义：$set、$let、$vars、核心变量；模块（JS模块类型）定义：包括所有TW API。例如：JS宏、微件、筛选器、通用模块等等。[[定义微件和微件参数]]、[[Variable Usage|https://bramchen.github.io/tw5-docs/zh-Hans/#Variable%20Usage]]

对条目与数据条目进行函数访问的筛选器.TW提供的或定义的过程（进程（宏）、微件、函数、小工具、小工具消息）和变量。

运用维基文本解析器有三种模式的其中一种：Pragmas（编译指示）在维基文本（条目）中定义不同形式的方法，提供对剩余文本解析方式的控制。也可以使用JavaScript模块实现对微件、宏模块类型的定义并在维基文本中调用。剩余的两种解析器模式都是笔记的解析渲染和正常显示。

```tw
Pragma: \define
Pragma: \function
Pragma: \import
Pragma: \parameters
Pragma: \procedure
Pragma: \rules
Pragma: \whitespace
Pragma: \widget
```

进程（Procedures），可以接受参数变量。不同位置，变量是引用方式不一样。你可以使用小工具定义变量。也可以在某个小工具添加属性导出变量。在方法体中，你可以使用小工具、筛选器、小工具消息、变量进行一系列动作。

筛选器作用于所有条目的所有字段，它是对条目字段进行操作的方法。或者说访问并操作所有条目字段数据的函数。TiddlyWiki提供一种方法，查找哪些条目符合给定的模型。条目或数据条目作为原始数据集，函数、筛选器作为原始数据集的函数处理和筛选工具。

定义函数，函数在TiddlyWiki中被定义为包含筛选器表达式的命名文本片段。函数可以具有命名参数，这些参数在函数内当作变量使用。感觉基本上是操作条目的各个字段，对字段内容进行增查删改。然后输出一组内容，表现形式为编程语言中的列表类型。


!!! 逻辑

Wiki编程的逻辑运算是通过什么实现的？微件、条目和筛选器？我目前认为，是通过筛选器构建运算模型，将条目数据作为输入，经过特定的运算步骤得到输出结果，然后微件根据输出结果展示和操作内容。例如简单的if语句，可以通过筛选器和函数计算某个条目的值得到输出，然后微件根据输出选择是否展示。

!!! 调试

action-log、log小工具、[[调试筛选器]]


!!! 模板字符串

JavaScript 模板字符串，模板字面量 是允许嵌入表达式的字符串字面量。在WIKI中使用【替换的属性值】实现这种方式。

```
JS使用 `this is ${foo} value` 实现，
wiki中使用 `this is $(变量名)$ and ${ 筛选器表达式 }$` 实现。
```
拼接（连接、串联）文本和变量：在JS中通常使用 '+' 符号实现。在WIKI中，【使用宏替换串联文本和变量】，在5.3.0版本中使用【替换属性值】或【替换筛选器表达式子】来连接文本和变量。
