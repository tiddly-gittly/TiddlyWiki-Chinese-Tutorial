created: 20230322125515191
creator: 霆枢
modified: 20230516134615639
modifier: 马不前
tags: 编程知识类
title: Node-TW常用Git命令
type: text/vnd.tiddlywiki

!! 前置知识

待补充

!! 克隆仓库到本地

```sh
git clone https://github.com/defnngj/project-name
```

!! 推送更新到远程仓库

```
git push
```

!! 强制推送（覆盖仓库数据）

```sh
git push -f origin main
```

* 主分支，可能为main，可能为master
* origin，表示远程仓库
* -f force ，词典翻译：强迫; 强行;

> git 推送 强制 远程仓库 main分支

!! 查看历史提交记录

```sh
git log
```

!! 合并多个commit

> 来源：https://zhuanlan.zhihu.com/p/91911809

!!! 前置知识
1. 合并从HEAD版本开始往过去数 n 个版本

```sh
git rebase -i HEAD~n
```

2. 合并指定区间的commit版本，该区间是一个前开后闭的区间。意思就是startpoint不参与合并

```sh
git rebase -i  [startpoint]  [endpoint]
```

> rebase 变基，整理(分支)，即在当前分支外另一点上重新应用当前分支的提交历史，变基是Git整合变更的一种方式，另一种方式是合并。

此命令执行后会进入使用vim编辑的状态，修改分支前的关键字（pick、squash、drop）英文状态下按i进入编辑，合并commit就修改pick为squash，修改完成后按ESC，然后英文状态下按:wq(冒号、W、Q)，在按回车确认，保存修改。git就会自动执行合并commit动作。


!!! 具体操作

1.执行 `git log` 查看提交历史

2.执行 `git rebase -i HEAD~3` ，弹出操作窗口

编辑commit内容，第二次、第三次提交的pick改为squash，把第二次、第三次提交都合并到第一次提交上。

```
pick 85697ee This is first commit.
squash ee461c1 This is second commit.
squash 326e415 This is third commit.
```
3.然后保存退出，Git会压缩提交历史。





!! GC（仓库垃圾回收）

> 参考链接：[[如何瘦身Git仓库|https://linux.cn/article-8556-1.html]]

!!! git仓库压缩瘦身
参考链接：https://blog.csdn.net/qq_40233736/article/details/86668768

git gc命令：https://blog.csdn.net/yjl2055/article/details/101072073



''快速使用''

```sh
# 查看历史大文件(含有linux命令)
git rev-list --objects --all | grep "$(git verify-pack -v .git/objects/pack/*.idx | sort -k 3 -n | tail -5 | awk '{print$1}')"
# 从历史中删除 target/ 这个文件夹(含有linux命令)
git filter-branch --force --index-filter 'git rm -r  --cached --ignore-unmatch target/' --prune-empty --tag-name-filter cat -- --all
# 执行仓库压缩
git gc --prune=now
# 推送到远程仓库
git push origin --force --all
```



!!! 单独删除某个文件的所有历史记录

 要从存储库的历史记录中彻底删除不需要的文件，可以使用 git filter-repo 工具或 BFG Repo-Cleaner 开放源代码工具。

参考链接：https://docs.github.com/zh/authentication/keeping-your-account-and-data-secure/removing-sensitive-data-from-a-repository



!! 硬回退

```sh
git reset --hard HEAD~n
```
* HEAD 是当前分支中''当前的commit''。
* HEAD的指向是可以改变的，比如你提交commit，切换仓库，分支，或者回滚版本，切换tag等。

硬回退，意味着放弃从当前commit版本到n版本的提交，并删除这段历史commit记录。

!! 取消指定的提交

```sh
 git revert <commit id>
```
该操作会恢复 所有文件内容历史状态 到 历史中选定某个commit的修改状态。例如当前A ，历史B，古历史C。 执行 git revert `<commit id>古历史C` 将会恢复所有文件内容至古历史C时候的提交状态。可以在Git可视化工具中看到文件的修改。此时在进行一次commit确认撤销。


!! 清空Git仓库的所有历史记录

1. 切换到新的分支

```sh
git checkout --orphan tmp_branch
```

2. 缓存所有文件（除了.gitignore中声明排除的）

```sh
git add -A
```

3. 提交跟踪过的文件（Commit the changes）

```sh
git commit -am "commit message"
```

4. 删除master分支（Delete the branch）

```sh
git branch -D main # 注意：你的主分支也可能是master
```

5. 重命名当前分支为main（Rename the current branch to main）

```sh
git branch -m main # 注意：你的主分支也可能是main
```

6. 提交到远程master分支 （Finally, force update your repository）

```sh
git push -f origin main # 注意：你的主分支也可能是main
```

通过以上几步就可以简单地把一个Git仓库的历史提交记录清除掉了，不过最好还是在平时的开发中严格要求一下提交日志的规范，尽量避免在里面输入一些敏感信息进来。


!! Credential Helper Selector

> Credential Helper 是 git 自带的凭据管理工具，可以把账号和密码安全地保存起来，不必要每次都输入账号和密码。

* cache 将凭据在内存中进行短时间的缓存；
* store 将凭据保存在磁盘上，长久有效；

打开对话框的方式：在终端中输入 `git credential-helper-selector` 命令，然后按回车键。 


!! 有趣的Git动画视频和网站

【纯享Git小动画！轻松看懂git命令-哔哩哔哩】 https://b23.tv/unZnX7j


如何优雅的使用Git：https://dangitgit.com/zh
